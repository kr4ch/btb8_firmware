'//***************************************************************************************
'// Tobias Kammacher, 2015
'// version 0.1
'//***************************************************************************************

'//******************************************************************************
'// Definitions
'//******************************************************************************

'//This defines how the application startsup and is a bit mask.
'//Bit 0 == 1 then OnStartup() is called just before waitevent
'//Bit 1 == 1 then StartAds() is called just before waitevent
#define AUTO_STARTUP                         1

'//Set this to 0 to disable all debugging messages
'#define ENABLE_DEBUG_PRINTS                  1
DIM ENABLE_DEBUG_PRINTS
ENABLE_DEBUG_PRINTS = 1

#define DEVICENAME                           "BTB8_STVO"
#define DEVICENAME_WRITABLE                  1
#define APPEARANCE                           BLE_APPEARANCE_GENERIC_TAG
#define MANF_NAME                            "Pfadi_Sturmvogel"
#define MODELSTR                             "Pizzaofen_Temp_BTB8"
#define SERIALNUM                            "42"
#define HWREV                                "HwRev1.0"
#define SWREV                                "SwRev0.1"

#define SYSID                                ""
#define REGLIST                              ""
#define PNPID                                ""

#define CHAR_CR                              13

'// Minimum acceptable connection interval (7.5ms)
#define MIN_CONN_INTERVAL                    7500
'// Maximum acceptable connection interval (1 second).
#define MAX_CONN_INTERVAL                    1000000

'// Slave latency -- number of conn events that can be missed
'// Effective Conn interval will be (SLAVE_LATENCY+1)*ACTUAL_CONN_INTERVAL
#define SLAVE_LATENCY                        0

'// Connection supervisory timeout (4 seconds) - max 32 seconds
#define CONN_SUP_TIMEOUT                     30000000 
'//DiscoverableMode, set to BLE_DISCOVERABILITY_xxx
#define DISCOVERY_MODE                       BLE_DISCOVERABILITY_GENERAL
#define MAX_DEVNAME_CHRS                     10
'//Set Appearance advertise 0 to suppress
#define ADV_APPEARANCE                       0
'//Advertise interval
#define ADV_INTERVAL_MS                      100
'//Advertise timeout
#define ADV_TIMEOUT_MS                       1000

'//Whitelist Policy in Adverts
#define ADV_WHITELIST_FILTER_POLICY          ADV_FILTERPOLICY_BOTH

'//Minimum long term key size in octets
#define MIN_LTK_SIZE                         8
'//Maximum long term key size in octets
#define MAX_LTK_SIZE                         16

'// Set this to non-zero to enable notiy on batt service
#define BATT_NOTIFY                          0
#define BATT_INIT_LEVEL_PERC                 100

'//This sets the pairing i/p capability using bonding
#define PAIRING_IOCAPABILITY                 BLE_IOCAPABILITY_NONE

'//Connection Update Negotiation paramters
#define FIRST_CONN_PARAMS_UPDATE_DELAY       5000
#define NEXT_CONN_PARAMS_UPDATE_DELAY        5000
#define MAX_CONN_PARAMS_UPDATE_DELAY         15000

'// The temperature sensor is polled this timeout
#define TEMPERATURE_POLL_MS					4000

'//******************************************************************************
'// Library Import
'//******************************************************************************
#include "lib\cli.upass.vsp.sblib"

// Timer between each wake-up
DIM TimeLoopWakeUp
TimeLoopWakeUp = 500 ' 1/2 seconde
// Timer Wake Up time
DIM TimeLoopStart
TimeLoopStart = 25 ' 25ms
DIM ComptTimeLoop
ComptTimeLoop = 0 ' no change timeLoop
DIM handleMemory
dim Txt$ as string
Txt$ = ""
'//**************************************************************
'// Global Variable Declarations
'//**************************************************************
'//=============================================================
'// CONFIGURE GPIO (copied from btb8test.sb)
'//============================================================= 
FUNCTION CONFIGOUTIN()
DIM rc
	// Unused GPIO: DIGITAL_OUT LOW
	rc = GPIOSetFunc(2,2,0)		: rc = GPIOSetFunc(3,2,0)	: rc = GPIOSetFunc(4,2,0)
	rc = GPIOSetFunc(8,2,0)		: rc = GPIOSetFunc(9,2,0)	: rc = GPIOSetFunc(10,2,0)
	rc = GPIOSetFunc(11,2,0)	: rc = GPIOSetFunc(12,2,0)	: rc = GPIOSetFunc(13,2,0)
	rc = GPIOSetFunc(14,2,0)	: rc = GPIOSetFunc(15,2,0)	: rc = GPIOSetFunc(16,2,0)
	rc = GPIOSetFunc(17,2,0)	: rc = GPIOSetFunc(18,2,0)	: rc = GPIOSetFunc(19,2,0)
	rc = GPIOSetFunc(20,2,0)	: rc = GPIOSetFunc(29,2,0)	: rc = GPIOSetFunc(30,2,0)
	// ADC
	rc = GPIOSetFunc(1,3,0x13)	// Thermistor input
	rc = GPIOSetFunc(5,3,0x13)	// Battery Voltage input
	rc = GPIOSetFunc(6,3,0x13)	// Board Mount Temperature Sensor LM94
	// DIGITAL_OUT
	rc = GPIOSetFunc(0,2,1)		// Status LED (green) ON
	rc = GPIOSetFunc(30,2,0)	// Digital Output for Mux A0
	rc = GPIOSetFunc(29,2,0)	// Digital Output for Mux A1
	rc = GPIOSetFunc(25,2,0)	// Digital Output for Mux A2
	
	PRINT "Finished configuring GPIOs"
ENDFUNC 1

SUB SetMux(rc)
	DIM bit[3] as INTEGER
	DIM i as INTEGER
	PRINT "Multiplexer Kanal: "; rc; " \n"
	rc = rc - 1					// Korrektur, da Mux1 = 000
	bit[0] = rc%2				// Berechne A0
	bit[1] = (rc/2)%2			// Berechne A1
	bit[2] = (rc/2/2)%2			// Berechne A2
	rc = GPIOSetFunc(30,2,bit[0])	// Digital Output for Mux A0
	rc = GPIOSetFunc(29,2,bit[1])	// Digital Output for Mux A1
	rc = GPIOSetFunc(25,2,bit[2])	// Digital Output for Mux A2
	PRINT "Multiplexer A2 A1 A0: "; bit[2];" ";bit[1];" ";bit[0]; " \n\n"
	// Hier muss noch eine Verzögerung eingebaut werden, Umschaltung ist zu schnell für Eingangsfilter
	// Nachfolgend gibt es einige Read-Kommandos, damit sich die Spannung am ADC-Eingang anpasst
	FOR i=1 TO 100				// ca. 6.8ms Loop
	rc = GPIORead(1)			// ADC Eingang 1 (Thermistor Differenzspannung)
	NEXT
ENDSUB

FUNCTION ReadBatVol()
	DIM rc, VD, ADCsc
	rc = GPIORead(5)			// ADC Eingang 5 (Batteriespannung)
	VD = 1000*(220+470)/470		// Spannungsteiler für Batteriespannung
	ADCSc = 10240/36			// Skalierung ADC Spannung (3.6V) auf DSPu (1024)
	rc = rc*VD/ADCSc			// Umrechnung ADC_Messwert auf mV
ENDFUNC rc

FUNCTION ReadCaseTemp()
	DIM rc, ADCsc
	rc = GPIORead(6)					// ADC Eingang 6 (Onboard-Temperatursensor)
	ADCSc = 10240/36					// Skalierung ADC Spannung (3.6V) auf DSPu (1024)
	rc = (2633-1000*rc/ADCSc)*10/136	// Grobe Berechnung der Temperatur (für genaue Formel siehe Datenblatt)
ENDFUNC rc

FUNCTION ReadADCTempRAW(rc)
	SetMux(rc)					// Multiplexer auf Kanal schalten
	'BP 0000						// Breakpoint (weiter mit "resume")
	PRINT "ReadADCTempRAW: trying to read GPIO"
	rc = GPIORead(1)			// ADC Eingang 1 (Thermistor Differenzspannung)
ENDFUNC rc

'//=============================================================
'// CLOSE UART
'//============================================================= 
FUNCTION Func3() 
	DIM rc
	DbgMsg("Timer 3")
	IF (ENABLE_DEBUG_PRINTS != 1) THEN
		DO
			rc = UartInfo(5)
		DOWHILE (rc != 0)
		DO
			rc = UartInfo(3)
		DOWHILE (rc != 0)
		DO
			rc = UartInfo(6)
		DOWHILE (rc != 0)
		uartclose()
		rc = GPIOSetFunc(21,2,1) '// TX
		rc = GPIOSetFunc(23,2,0) '// RTS
	ENDIF
	rc = CONFIGOUTIN()
	TIMERSTART(0,100,0) 
ENDFUNC 1 
'//=============================================================
'// Init Temperature ADC
'//=============================================================
sub InitTempADC()


	print "initTempADC(): start ble tx after 100ms"
	TimerStart(2,100,0)    '//1

endsub
'//**************************************************************
'// Handler definitions
'//**************************************************************
'//=============================================================
'// This handler is called when Timer 0 expires 
'//=============================================================
function Func2() as integer
   
	DIM rc, Mux
	DIM Thm_RAW AS INTEGER	// Thermistor Sensor Raw Value
	DIM Bat_mV  AS INTEGER	// Battery Voltage in mV
	DIM B_Temp  AS INTEGER	// Board Temperature in mV
	DIM txtVol$ AS STRING	// Battery Voltage Value as String
	DIM txtTemp$ AS STRING	// Temporary storage of String for temperature value
	DIM clrf$ 	AS STRING
	
	clrf$ = "\r\n"
	Txt$ = ""
	
	Mux		= 1
	Thm_RAW = ReadADCTempRAW(Mux)
	PRINT "Thermistor Temp RAW (Kanal ";Mux;"): "; Thm_RAW; " DSPu\n\n"
	Txt$ = Txt$ + "A"
	SPRINT #txtTemp$,Thm_RAW
	Txt$ = Txt$ + txtTemp$
	
	Mux		= 2
	Thm_RAW = ReadADCTempRAW(Mux)
	PRINT "Thermistor Temp RAW (Kanal ";Mux;"): "; Thm_RAW; " DSPu\n\n"
	Txt$ = Txt$ + "B"
	SPRINT #txtTemp$,Thm_RAW
	Txt$ = Txt$ + txtTemp$
	
	Mux		= 3
	Thm_RAW = ReadADCTempRAW(Mux)
	PRINT "Thermistor Temp RAW (Kanal ";Mux;"): "; Thm_RAW; " DSPu\n\n"
	Txt$ = Txt$ + "C"
	SPRINT #txtTemp$,Thm_RAW
	Txt$ = Txt$ + txtTemp$

   	Txt$ = Txt$ + clrf$

	
	Mux		= 4
	Thm_RAW = ReadADCTempRAW(Mux)
	PRINT "Thermistor Temp RAW (Kanal ";Mux;"): "; Thm_RAW; " DSPu\n\n"
	Txt$ = Txt$ + "D"
	SPRINT #txtTemp$,Thm_RAW
	Txt$ = Txt$ + txtTemp$
	
	Mux		= 5
	Thm_RAW = ReadADCTempRAW(Mux)
	PRINT "Thermistor Temp RAW (Kanal ";Mux;"): "; Thm_RAW; " DSPu\n\n"
	Txt$ = Txt$ + "E"
	SPRINT #txtTemp$,Thm_RAW
	Txt$ = Txt$ + txtTemp$
	
	Mux		= 6
	Thm_RAW = ReadADCTempRAW(Mux)
	PRINT "Thermistor Temp RAW (Kanal ";Mux;"): "; Thm_RAW; " DSPu\n\n"
	Txt$ = Txt$ + "F"
	SPRINT #txtTemp$,Thm_RAW
	Txt$ = Txt$ + txtTemp$

	Txt$ = Txt$ + clrf$


	Bat_mV  = ReadBatVol()
	B_Temp  = ReadCaseTemp()

	PRINT "\nBattery Voltage    : ", Bat_mV ; " mV\n"
	PRINT "Board Temperature  : ", B_Temp ; " Grad Celsius\n"
	
'//	Txt$ = Txt$ + "V"
'//	SPRINT #txtVol$,Bat_mV
'//	Txt$ = Txt$ + txtVol$
	
'//	Txt$ = Txt$ + "Z"
'//	SPRINT #txtTemp$,B_Temp
'//	Txt$ = Txt$ + txtTemp$

   PRINT "Trying to send text string over BLE "
   '//
   '//Txt$ = Txt$ +  Txt$
	rc = BleVspWrite(Txt$)
 
   '// BLE DISCONNECT
   '//rc = BLEDISCONNECT(handleMemory)
   '//uartclose()

   TimerStart(2,10000,0)
   '//TimerStart(0,10,0) 
endfunc 1
'//=============================================================
'// LONG TIME
'//============================================================= 
FUNCTION Func0() 
	rc = bleadvertstop()
	if ENABLE_DEBUG_PRINTS == 1 THEN
	   rc = GPIOSetFunc(17,2,0)
	endif
	DbgMsg("Timer 0")
	if ComptTimeLoop == 0 then
		TimeLoopWakeUp = 500
		TimeLoopStart = 25
	else
		ComptTimeLoop = ComptTimeLoop - 1
	endif
	TIMERSTART(1,TimeLoopWakeUp,0) 
ENDFUNC 1 
'//=============================================================
'// SHORT TIME
'//============================================================= 
FUNCTION Func1() 
    dim Adr$
    Adr$=""
	if ENABLE_DEBUG_PRINTS == 1 THEN
	   rc = GPIOSetFunc(17,2,1)
	endif
	DbgMsg("Timer 1")
	rc = bleadvertstart(0,Adr$,25,25,0)
	TIMERSTART(0,25,0) 
ENDFUNC 1 
'//==============================================================================
'// TIME OUT = > nothing
'//==============================================================================
function HandlerTimOutJA() as integer
	DbgMsg("TIME OUT")
endfunc 1
'//==============================================================================
'// VSP RX but nothing to do
'//==============================================================================
function HandlerLoop2()
	'NOTHING
endfunc 1
'//=============================================================
'// This handler is called when BLE action 
'//=============================================================
function HandlerBLE(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer  
     '// Inform libraries
     ConnMngrOnBleMsg(nMsgId,nCtx)
     AdvMngrOnBleMsg(nMsgId,nCtx)
	 DbgMsg("*** HandlerBLE ***")
     select nMsgId
        case BLE_EVBLEMSGID_CONNECT
            DbgMsgVal(" --- Connect : ",nCtx)
            handleMemory = nCtx
			TimerCancel(0)
			TimerCancel(1)
			InitTempADC()
			TimeLoopWakeUp = 25
			TimeLoopStart = 25
			ComptTimeLoop = 500
         case BLE_EVBLEMSGID_DISCONNECT
            DbgMsgVal(" --- Disconnect : ",nCtx) 
            rc = BLEDISCONNECT(handleMemory)
   			uartclose()
   			'// Restart advertising
			TIMERSTART(0,100,0) 
        case BLE_EVBLEMSGID_IMMEDIATE_ALERT_SERVICE_ALERT
			DbgMsgVal( "\n --- Immediate Alert Service Alert ", nCtx)
            DbgMsg("\n")
		case BLE_EVBLEMSGID_DISPLAY_PASSKEY
			DbgMsgVal("Display Pairing Passkey ",nCtx)
		case BLE_EVBLEMSGID_NEW_BOND
			DbgMsg(" +++ New Bond")
		case BLE_EVBLEMSGID_UPDATED_BOND
			DbgMsg(" +++ Updated Bond")
		case BLE_EVBLEMSGID_ENCRYPTED
			DbgMsg(" +++ Encrypted Connection")
	case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
		DbgMsgVal(" -- Conn to Bonded Master ",nCtx)
	case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
		DbgMsgVal(" +++ Auth Key Request, type=",nCtx)
	case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
		ShowConnParms(nCtx)
	case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
		DbgMsg(" ??? Conn Parm Negotiation FAILED")
	case else
		DbgMsgVal("Unknown Ble Msg", nMsgId)
	endselect
endfunc 1
'//=============================================================
'// Equivalent to main() in C
'//=============================================================
//all events have the same handler
OnEvent  EVBLEMSG  call HandlerBLE
ONEVENT EVTMR0 CALL Func0 
ONEVENT EVTMR1 CALL Func1 
OnEvent EVTMR2 call Func2
ONEVENT EVTMR3 CALL Func3
OnEvent  EVBLE_ADV_TIMEOUT  call HandlerTimOutJA
OnEvent  EVVSPRX            call HandlerLoop2 
OnEvent  EVUARTRX           call HandlerLoop2
OnEvent  EVVSPTXEMPTY       call HandlerLoop2
OnEvent  EVUARTTXEMPTY      call HandlerLoop2

'//=============================================================
'//=============================================================

'rc = CONFIGOUTIN()
'rc = GPIOSetFunc(17,2,1)

'// Mode DEBUG if open
'rc = GPIORead(13)
if rc == 0 THEN
	ENABLE_DEBUG_PRINTS = 1
	print "\nDEBUG OK\n\r"
else
	ENABLE_DEBUG_PRINTS = 0
	print "\nNO DEBUG\n\r"
endif
TIMERSTART(3,1000,0)
WAITEVENT